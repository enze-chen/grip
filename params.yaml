# Input data for the GRand canonical Interface Predictor (GRIP). Format is YAML.

# Parameters for the algorithm
algo:
    ngrid: 100          # Number of grid points in each dim = ngrid * nprocs.
    frac_min: 0.00      # Minimum fraction of atoms on a plane (0 <= n <= 1).
    frac_max: 1.00      # Maximum fraction of atoms on a plane. Set both to 1.0 for gamma-surface.
    gb_gap: 0.3         # Initial gap between slabs prior to MD/relaxation (in Ang.).
    perturb_u: 0.0      # Maximum random perturbation (A) of atoms above GB
    perturb_l: 0.0      # Maximum random perturbation (A) of atoms below GB
    gb_thick: 10        # Thickness of GB region (in Angstrom) on either side of interface.
    pad: 10             # Extra padding (A) on top of gb_thick for relaxation / energy calculations.
    vacuum: 1           # Vacuum to add on top for MD (A); less needed for s boundary.

    inter_p: 0.0        # Probability of swapping with interstitial sites. [0.0, 1.0] = [Never, Always].
    inter_n: 2          # Number of GB interstitial sites to swap with atoms in GB region.
    inter_t: 1.5        # Thickness of region (A) on either side of GB to search for interstitials.
    inter_u: False      # Only choose unique interstitial sites.
    inter_r: True       # Randomly choose interstitial sites vs. largest volume
    inter_s: 'Ti'       # species of atom to insert.

    MD_run: 0.95        # Probability of running MD simulation before relaxing. [0.0, 1.0] = [Never, Always].
    Tmin: 300           # Temperature lower bound for MD simulation.
    Tmax: 1200          # Temperature upper bound, vary in multiple of 100s.
    MD_min:   5000      # Min steps for MD simulation.
    MD_max: 500000      # Max steps for MD simulation.
    var_steps: True     # True: allow timesteps to be extended beyond MD_min.

    lammps_bin: '/g/g16/chen120/bin/lammps_serial'     # Absolute path to [serial] LAMMPS binary or shell command.
    Emult: 2            # Maximum energy threshold * Egb_min to keep; at least 1.0.
    nruns: 0            # Number of iterations in total (each processor). Set 0 for infinite loop.
    clear_freq: 100     # Number of iterations before clearing duplicates. Set 0 to never clear.


# Parameters for the material
struct:
    user: False         # True: read existing cells (POSCAR_*), False: generate w/ ase.
    cutoff: 35          # Max height (A) to cut slabs if user=False; speed up calcs. Set to 0 to ignore.
    write: True         # Write generated cells to POSCAR_*
    size0: [1, 1, 1]    # Minimum replications in [x, y, z] to create supercells.
    size: [2, 4, 15]    # Replications in [x, y, z] to create supercells. z is not used if user=True.
    reps: 2             # Sample replications (1) exactly, (2) uniform, (3) weighted smaller, (4) weighted larger.

    # Basic info - potential dependent!
    upper_dirs: [ [5, 2, -7, 0], [0, 0, 0, -1], [-3, 4, -1, 0] ]    # Ti(31-40) tilt
    lower_dirs: [ [7, -2, -5, 0], [0, 0, 0, -1], [-1, 4, -3, 0] ]
    symbol: 'Ti'        # Chemical formula
    crystal: 'hcp'      # fcc, bcc, hcp, or dc
    mass: 47.867        # Atomic mass
    # HENNIG
    a: 2.9305           # a lattice constant
    c: 4.6783           # c lattice constant; hcp only, ignored for others
    dlat: 0.703883      # Minimal normal component of lattice vector to calculate Nplane. Required if user=True. Set 0 to ignore.
    Ecoh: -4.8312       # Energy per atom in bulk
    pair_style: 'meam/spline'               # pair_style for LAMMPS
    pair_coeff: '* * /g/g16/chen120/lammps/pots/Ti.meam.spline Ti'     # pair_coeff for LAMMPS
    # ZOPE
    #a: 2.9527           # a lattice constant
    #c: 4.6808           # c lattice constant; hcp only, ignored for others
    #dlat: 0.0           # Minimal normal component of lattice vector to calculate Nplane. Required if user=True. Set 0 to ignore.
    #Ecoh: -4.85         # Energy per atom in bulk
    #pair_style: 'eam/alloy'                 # pair_style for LAMMPS
    #pair_coeff: '* * /g/g16/chen120/lammps/pots/TiAl.eam.alloy Ti'     # pair_coeff for LAMMPS

